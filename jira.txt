// extension.ts
import * as vscode from "vscode";
import fetch from "node-fetch";
import * as path from "path";
import * as fs from "fs";
import {
  getUserContext,
  clearUserContext,
  formatUserContextMarkdown,
  showContextDetails,
  handleContextCommand,
} from "./context";

const BASE_PROMPT =
  "You are a helpful Jira assistant. You can retrieve, comment on, update, and create Jira issues. Be concise and return markdown-formatted responses.";

let currentIssueKey: string | null = null;
const output = vscode.window.createOutputChannel("Jira Extension Logs");

export function activate(context: vscode.ExtensionContext) {
  const handler: vscode.ChatRequestHandler = async (
    request,
    chatContext,
    stream,
    token
  ) => {
    const config = vscode.workspace.getConfiguration();
    const domain = config.get<string>("jiraChat.domain");
    const email = config.get<string>("jiraChat.email");
    const apiToken = config.get<string>("jiraChat.apiToken");

    if (!domain || !email || !apiToken) {
      stream.markdown("‚ùå Please configure Jira credentials in settings (`jiraChat.*`).");
      return;
    }

    const userInput = request.prompt.trim();
    const parts = userInput.split(" ").map((p) => p.trim());
    const firstWord = parts[0]?.toLowerCase();
    const secondWord = parts[1]?.toLowerCase();

    const isHandled = await handleKnownCommands(
      firstWord,
      secondWord,
      parts,
      context,
      domain,
      email,
      apiToken,
      stream
    );
    if (isHandled) return;

    // Enforce context before other commands
    const userContext = getUserContext(context);
    if (!userContext?.issueKey) {
      stream.markdown("‚ùó Please set context first using `context set-story <ISSUE-KEY>`.");
      return;
    }

    const knownCommands = [
      "get",
      "comment",
      "update-summary",
      "update-field",
      "create-subtask",
      "generate-files",
      "create-branch",
      "generatefilesandcreatepr",
      "generatefileandcreateprwithapi",
      "update-all-details-in-jira",
      "help"
    ];

    if (knownCommands.includes(firstWord)) {
      await handleJiraCommand(firstWord, parts.slice(1), {
        currentIssueKey: userContext.issueKey || null,
        domain,
        email,
        apiToken,
        context: chatContext,
        stream,
        request,
        token,
      });
      return;
    }

    const contextualPrompt = userContext.issueKey
      ? `${BASE_PROMPT} The current Jira issue in context is ${userContext.issueKey}.`
      : BASE_PROMPT;

    const messages = [
      vscode.LanguageModelChatMessage.User(contextualPrompt),
      ...getAssistantHistory(chatContext),
      vscode.LanguageModelChatMessage.User(userInput),
    ];

    const aiResponse = await request.model.sendRequest(messages, {}, token);
    for await (const chunk of aiResponse.text) {
      stream.markdown(chunk);
    }
  };

  const participant = vscode.chat.createChatParticipant("jiraCopilot", handler);
  context.subscriptions.push(participant);

  context.subscriptions.push(
    vscode.commands.registerCommand("jiraChat.start", () => {
      vscode.window.showInformationMessage("Jira Chat Started!");
    })
  );
}

async function handleKnownCommands(
  firstWord: string,
  secondWord: string,
  parts: string[],
  context: vscode.ExtensionContext,
  domain: string,
  email: string,
  token: string,
  stream: vscode.ChatResponseStream
): Promise<boolean> {
  if (firstWord === "context" && secondWord?.startsWith("set")) {
    const action = `${secondWord}`;
    const value = parts.slice(2).join(" ").trim();
    if (!value) {
      stream.markdown("‚ùó Usage: `context set-story <ISSUE-KEY>` or `context set-project <PROJECT-KEY>`");
      return true;
    }
    await handleContextCommand(action, value, context, domain, email, token, stream);
    return true;
  }

  if (firstWord === "context" && secondWord === "clear") {
    await clearUserContext(context);
    stream.markdown("üßπ Jira context cleared.");
    return true;
  }

  if (firstWord === "context" && secondWord === "show") {
    const markdown = formatUserContextMarkdown(getUserContext(context));
    stream.markdown(markdown);
    return true;
  }

  if (firstWord === "context" && secondWord === "details") {
    await showContextDetails(context, domain, email, token, stream);
    return true;
  }

  return false;
}
--------
// context.ts
import * as vscode from "vscode";
import {
  jiraGetProject,
  jiraGetIssue
} from "./jiraintegration";

export type JiraContext = {
  issueKey?: string;
  projectKey?: string;
  sprint?: string | null;
};

const CONTEXT_KEY = "jiraContext";

export function getUserContext(global: vscode.ExtensionContext): JiraContext {
  return global.globalState.get<JiraContext>(CONTEXT_KEY) || {};
}

export async function handleContextCommand(
  action: string,
  value: string,
  global: vscode.ExtensionContext,
  domain: string,
  email: string,
  token: string,
  stream: vscode.ChatResponseStream
): Promise<void> {
  const upperValue = value.trim().toUpperCase();
  const current = getUserContext(global);
  const newContext = { ...current };

  try {
    switch (action.toLowerCase()) {
      case "set-project":
        await jiraGetProject(domain, email, token, upperValue);
        newContext.projectKey = upperValue;
        await global.globalState.update(CONTEXT_KEY, newContext);
        stream.markdown(`‚úÖ Project context set to \`${upperValue}\``);
        break;

      case "set-story":
      case "set-defect":
        await jiraGetIssue(domain, email, token, upperValue);
        newContext.issueKey = upperValue;
        await global.globalState.update(CONTEXT_KEY, newContext);
        stream.markdown(`‚úÖ Issue context set to \`${upperValue}\``);
        break;

      case "set-sprint":
        newContext.sprint = upperValue;
        await global.globalState.update(CONTEXT_KEY, newContext);
        stream.markdown(`‚úÖ Sprint context set to \`${upperValue}\``);
        break;

      case "set-backlog":
        newContext.sprint = null;
        await global.globalState.update(CONTEXT_KEY, newContext);
        stream.markdown(`‚úÖ Context set to backlog`);
        break;

      default:
        stream.markdown("‚ùó Unknown context command. Usage: `context set-story <ISSUE-KEY>`");
    }
  } catch (error: any) {
    stream.markdown(`‚ùå ${error.message}`);
  }
}

export async function showContextDetails(
  global: vscode.ExtensionContext,
  domain: string,
  email: string,
  token: string,
  stream: vscode.ChatResponseStream
): Promise<void> {
  const context = getUserContext(global);
  if (!context.issueKey) {
    stream.markdown("‚ùó No Jira issue is set. Use `context set-story <ISSUE-KEY>` first.");
    return;
  }

  try {
    const issue = await jiraGetIssue(domain, email, token, context.issueKey);
    const summary = issue.fields.summary;
    const status = issue.fields.status.name;
    const description = issue.fields.description?.content?.[0]?.content?.[0]?.text || "_No description_";

    stream.markdown(`### üßæ ${issue.key}: ${summary}

**Status:** ${status}

**Description:**
${description}`);
  } catch (err: any) {
    stream.markdown(`‚ùå Failed to retrieve context issue: ${err.message}`);
  }
}

export async function clearUserContext(global: vscode.ExtensionContext): Promise<void> {
  await global.globalState.update(CONTEXT_KEY, {});
}

export function formatUserContextMarkdown(ctx: JiraContext): string {
  return `### üìå Current Context
- **Project**: \`${ctx.projectKey || "Not set"}\`
- **Issue**: \`${ctx.issueKey || "Not set"}\`
- **Sprint**: \`${ctx.sprint ?? "Not set"}\``;
}
